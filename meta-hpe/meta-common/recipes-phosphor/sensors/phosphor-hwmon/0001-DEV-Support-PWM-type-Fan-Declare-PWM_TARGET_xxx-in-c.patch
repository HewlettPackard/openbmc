From 47bd8c3e08c797e6cbbe27a24029c3dd1890fc26 Mon Sep 17 00:00:00 2001
From: John Chung <john.chung@hpe.com>
Date: Sat, 17 Aug 2019 05:11:34 +0800
Subject: [PATCH] DEV: Support PWM-type Fan (Declare PWM_TARGET_xxx in
 configure file)

---
 hwmon.cpp    |  6 ++++++
 hwmon.hpp    | 16 ++++++++++++++++
 mainloop.cpp |  5 +++++
 sensor.cpp   |  7 ++++++-
 4 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/hwmon.cpp b/hwmon.cpp
index bfb67aa..2afa606 100644
--- a/hwmon.cpp
+++ b/hwmon.cpp
@@ -25,4 +25,10 @@ bool getAttributes(const std::string& type, Attributes& attributes)
     return true;
 }
 
+bool getPwmAttributes(Attributes& attributes)
+{
+    attributes = typeAttrPwm;
+    return true;
+}
+
 } //  namespace hwmon
diff --git a/hwmon.hpp b/hwmon.hpp
index 4f4545c..63cba16 100644
--- a/hwmon.hpp
+++ b/hwmon.hpp
@@ -60,6 +60,14 @@ static constexpr auto typeAttrMap = {
                     "power"),
 };
 
+// 1 - hwmon class
+// 2 - unit
+// 3 - sysfs scaling factor
+// 4 - namespace
+static constexpr auto typeAttrPwm =
+    std::make_tuple(hwmon::type::cfan, ValueInterface::Unit::Percentage, 0,
+                    "fan_pwm");
+
 inline auto getHwmonType(decltype(typeAttrMap)::const_reference attrs)
 {
     return std::get<0>(attrs);
@@ -93,6 +101,14 @@ using Attributes =
  */
 bool getAttributes(const std::string& type, Attributes& attributes);
 
+/** @brief Get Attribute tuple for PWM type
+ *
+ *  Find PWM type tuple
+ *
+ *  @param[out] A pointer to the Attribute tuple
+ */
+bool getPwmAttributes(Attributes& attributes);
+
 } //  namespace hwmon
 
 // vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
diff --git a/mainloop.cpp b/mainloop.cpp
index 82cf3aa..6304061 100644
--- a/mainloop.cpp
+++ b/mainloop.cpp
@@ -176,6 +176,11 @@ std::optional<ObjectStateData>
     const auto& [sensorSetKey, sensorAttrs] = sensor;
     const auto& [sensorSysfsType, sensorSysfsNum] = sensorSetKey;
 
+    auto id = env::getEnv("PWM_TARGET", sensorSetKey);
+    if (!id.empty()) {
+        hwmon::getPwmAttributes(attrs);
+    }
+
     /* Note: The sensor objects all share the same ioAccess object. */
     auto sensorObj =
         std::make_unique<sensor::Sensor>(sensorSetKey, _ioAccess, _devPath);
diff --git a/sensor.cpp b/sensor.cpp
index 6e5e841..4a4bf15 100644
--- a/sensor.cpp
+++ b/sensor.cpp
@@ -181,7 +181,12 @@ std::shared_ptr<ValueObject> Sensor::addValue(const RetryIO& retryIO,
     hwmon::Attributes attrs;
     if (hwmon::getAttributes(_sensor.first, attrs))
     {
-        iface->unit(hwmon::getUnit(attrs));
+        auto id = env::getEnv("PWM_TARGET", _sensor);
+        if (!id.empty()) {
+            iface->unit(ValueInterface::Unit::Percentage);
+        } else {
+            iface->unit(hwmon::getUnit(attrs));
+        }
 
         setScale(iface, hwmon::getScale(attrs), val);
 
